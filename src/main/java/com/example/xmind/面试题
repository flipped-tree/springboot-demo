Java基本原理
                                HashMap如何实现，多线程环境下如何使用Map
                                                                能够回答出HashMap的hash算法、碰撞检测的标准方法
                                                                能够延伸到Java如何处理碰撞冲突问题，能够回答出使用链表和红黑树
                                                                能回答concurrentHashMap及其如何实现线程安全，JDK1.7与1.8的实现差异。（6）
                                                                还可以继续延伸到分段锁思想与volatile结合cas（7）
 

                                JVM
                                                                介绍JVM的结构和类加载原理
                                                                                                了解虚拟机运行时包含的数据区（方法区、虚拟机栈、本地方法栈、堆和程序计数器）及各自的作用 (6)
                                                                                                了解ClassLoader的机制，双亲委派关系，以及通常情况下的类冲突如何解决 (6)
                                                                                                JVM内存及垃圾回收

                                                                JVM内存模型，垃圾回收
                                                                                                运行时内存中各个区的作用
                                                                                                如何判断一个对象是否可以回收（GC root）
                                                                                                能简述Gc过程
                                                                                                垃圾回收处理器，CMS、G1的垃圾回以如何实现缩短STW时间（7）
                                并发编程
                                                                Java中的volatile关键字的作用是什么
                                                                                                能回答出保证了内存修改的立即可见，以及禁止进行指令重排序 (6)
                                                                                                能够列举一些典型的使用它的场景，以及解释Java内存模型的细节
                                                                                                能从计算机体系结构角度（主存、寄存器等）回答如何保证内存的修改立即可见（7）
                                                                                                Java并发包里面的东西使用情况

                                                                                                能说出并发包里面的任意一种概念（重入锁，CountDownLatch，ConcurrentHashMap），并且能够说出使用场景（6）
                                                                                                能够说出为什么要用这种，不用另外一种？（6）
                                                                                                能够说出里面的实现原理，看过源码尤佳；（7）

                                多线程
                                                                简述线程池工作原理
                                                                了解线程间通信wait&notify、lock&condition等
                                                                能写出生产者消费者代码（7）

                                AQS实现原理及应用
                                                                AQS是什么？简述原理，内置双向队列
                                                                公平锁、非公平锁
                                                                cas，以及cas的aba问题
                                                                aba问题有没有什么好的解决思路（7）


常用中间件

                                分布式缓存redis或者memcache的原理
                                                                Redis和memchache有什么区别、不同的适用场景，分别什么问题、不足，如何避免
                                                                Redis/memcache内部原理，比如存储结构，主从同步，核心算法是怎么样的？
                                                                跳表（skipList）原理
                                                                redis扩容问题，能回答渐进式hash或其思想
                                                                redis如何实现分布式锁，以及不断优化redis锁
                                                                比如：执行前加锁、后释放锁，如果执行节点挂了，锁一直占用如何优化？（添加超时）
                                                                还没执行完逻辑，锁超时了？（可以使用守护线程续命）
                                
                                消息中间件mq的原理
                                                                消息中间件适用于什么场景？（6）
                                                                基于消息中间件的架构是一种什么样的设计模式？（6）
                                                                消息积压/重复投递该怎么处理（6）
                                                                消息主备/重投策略是怎么样的？（7）
                                                                同类型的消息系统还知道哪几个，说一下区别，考察横向广度（7）
                                                                事务消息
 

 

Spring

                                spring生命周期
                                                                bean加载机制、循环依赖如何解决
                                springBoot
                                                                如何实现自动装配
                                springAop
                                                                是什么，如何实现？
                                                                动态代理（jdk vs cglib）
                                                                通知方式，通知的顺序，以及使用责任链来管理多种通知
                                                                分布式

分布式环境下的容错设计：幂等、分布式事务、二阶段提交、CAP理论、最终一致性、乐观锁、悲观锁

能回答这些概念，并能描述使用场景 (6)
能扩展更深的相关知识，比如悲观锁，能说出在什么情况下选择哪种方式 (7)
理论描述正确，实践能够跟理论结合起来（7）
分布式通信：RPC通信、NIO、TCP/IP等概念以及常用的方式

能回答这些概念，并能描述使用场景 (6)
能扩展更深的相关知识，比如序列化，能说出在什么情况下选择哪种方式 (7)
理论描述正确，实践能够跟理论结合起来（7）
RPC框架

dubbo架构：注册中心、监控中心、provider/consumer
心跳链接等、服务发现
dubbo分层设计架构，插件化设计
负载均衡策略
dubbo+zk（CP）对比springCloud Fein+Eureka(AP)
稳定性问题，熔断、降级、限流



mysql慢查询排查思路

先看explain sql，看看SQL执行计划 (6)
执行计划中重点关注，走到了哪个索引，如果没有索引，则建立索引 (6)
额外可以回答出：关注临时表创建、回表、索引覆盖、磁盘访问、网络开销 (7)
mysql索引

最左匹配
B+树以及为什么使用B+树，而不用B树
索引提升读取效率的同时，也会降低写操作的效率
索引列的选取，索引列的取值尽量离散
了解聚簇索引
索引覆盖、索引下推
数据库事务四个特性

隔离级别，及各级别能够解决的问题

ACID
能列举脏读、提交读、可重复读、串行化隔离级别，以及各自的含义
能解释数据库实现这些级别的常用方式和需要达到的效果
各级别是如何实现的：读锁（共享锁）、写锁（排它锁）、mvcc
sql基础

where与having的区别
Linux基本操作

如何找到指定的端口被哪个进程占用了，比如8080端口

/usr/sbin/lsof –I :8080 或 netstat –natp | grep 8080 (P6)
其它的扩展回答 (7)
Linux系统里面的top命令，里面能看到Load指标，Load具体是指什么意思

Load要结合CPU数量来看，假设CPU数量为4,那么每个CPU都满载时Load为4,如果每个CPU处理任务的过程中，还各有一个任务在排队等待，那么Load为8 (7)
能解释Load反映CPU的负载指标，且是线性数值 (6)
机器部署的是我们自己的Java应用，突然Load高于预期很多，如何排查出问题在哪里


使用命令查询机器的负载，找出瓶颈是CPU、内存、硬盘还是网络 (6)
会dump Java 进程的线程和内存进行分析，命令内容jstack 以及 jmap (7)


软件设计的开闭原则能否理解？--对修改关闭、对扩展开放
说一下设计好的API需要满足几个标准？--可读性、兼容性、可扩展性
SPI听过吗？软件框架设计的扩展点该怎么定义？--Service Provider Interface
如何做一次合理的重构？